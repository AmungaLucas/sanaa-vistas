rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Posts collection - Main post documents
    match /posts/{postId} {
      // Anyone can read published posts
      allow read: if resource.data.status == 'published';
      
      // Only authenticated users who own the post can create/update/delete
      // You may want to add admin role checks here
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow owner to update
        isOwner(resource.data.authorId) ||
        // Allow increment of views/likes count (for automatic updates)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'likes', 'updatedAt'])
      );
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Likes subcollection - stores individual user likes
      match /likes/{userId} {
        // Anyone can read likes (to count total likes)
        allow read: if true;
        
        // Users can only create/delete their own like
        allow create: if isAuthenticated() && isOwner(userId) && 
          request.resource.data.keys().hasOnly(['userId', 'likedAt']) &&
          request.resource.data.userId == request.auth.uid;
        
        allow delete: if isAuthenticated() && isOwner(userId);
        
        // No updates allowed on likes
        allow update: if false;
      }
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own document
      allow read: if isOwner(userId);
      
      // Users can create/update their own document
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && (
        // Allowed fields to update
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'displayName', 'username', 'photoURL', 'about', 
          'bookmarks', 'updatedAt', 'profilePic'
        ])
      );
      
      // Users can delete their own document
      allow delete: if isOwner(userId);
    }
    
    // Comments collection
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Authenticated users can create comments
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update/delete their own comments
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Subscribers collection
    match /subscribers/{subscriberId} {
      // No one can read subscribers (admin only via backend)
      allow read: if false;
      
      // Anyone can subscribe (create)
      allow create: if request.resource.data.keys().hasOnly(['email', 'subscribedAt']) &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$'); // Basic email validation
      
      // No updates or deletes allowed from client
      allow update: if false;
      allow delete: if false;
    }
    
    // Categories collection (if you add this)
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Only admin should manage categories
    }
  }
}
